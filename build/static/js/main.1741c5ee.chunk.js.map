{"version":3,"sources":["api.ts","App.tsx","utils.ts","serviceWorker.ts","index.tsx"],"names":["API_URL","a","axios","get","then","res","data","useStyles","makeStyles","theme","createStyles","root","marginTop","title","marginBottom","container","padding","card","App","classes","useState","ruuviTags","setRuuviTags","useEffect","getTagData","timer","setInterval","clearInterval","tags","console","log","getTagInfo","tag","imageUrl","Card","className","CardActionArea","CardMedia","component","alt","height","image","window","location","origin","CardContent","Typography","gutterBottom","variant","name","color","List","aria-label","ListItem","ListItemIcon","ListItemText","primary","temperature","Number","humidity","toFixed","pressure","timestamp","format","Date","CardActions","Button","size","href","data-action","Fragment","CssBaseline","Container","maxWidth","length","Grid","spacing","item","xs","sm","md","lg","xl","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1741c5ee.chunk.js","sourcesContent":["import axios from 'axios'\nconst API_URL =\n  process.env.NODE_ENV === 'production'\n    ? 'http://raspberrypi:3100//ruuvitag'\n    : 'http://192.168.10.38:3100/ruuvitag'\n\nexport async function tags(): Promise<any> {\n  return await axios.get(`${API_URL}/tags`).then((res) => res.data)\n}\n","import React, { useEffect, useState } from 'react'\nimport './App.css'\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles'\nimport Grid from '@material-ui/core/Grid'\nimport { tags } from './api'\nimport { Ruuvitag } from './types'\nimport { timestamp } from './utils'\nimport {\n  Card,\n  CardContent,\n  Typography,\n  CardActions,\n  Button,\n  CardActionArea,\n  CardMedia,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  CssBaseline,\n  Container,\n} from '@material-ui/core'\nimport WbSunny from '@material-ui/icons/WbSunny'\nimport Schedule from '@material-ui/icons/Schedule'\nimport Opacity from '@material-ui/icons/Opacity'\nimport WhatsApp from '@material-ui/icons/WhatsApp'\nimport FilterDrama from '@material-ui/icons/FilterDrama'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      marginTop: 44,\n    },\n    title: {\n      marginBottom: 44,\n    },\n    container: {\n      marginTop: '5rem',\n      padding: 24,\n    },\n    card: {},\n  })\n)\n\nconst App = () => {\n  const classes = useStyles()\n  const [ruuviTags, setRuuviTags] = useState<Ruuvitag[]>([])\n\n  useEffect(() => {\n    getTagData()\n  }, [])\n\n  useEffect(() => {\n    const timer = setInterval(() => getTagData(), 2000)\n    return () => clearInterval(timer)\n  })\n\n  const getTagData = () => {\n    tags().then((res) => {\n      console.log(res)\n      setRuuviTags(res)\n    })\n  }\n\n  const getTagInfo = (tag: Ruuvitag, imageUrl: string) => {\n    return (\n      <Card className={classes.card}>\n        <CardActionArea>\n          <CardMedia\n            component=\"img\"\n            alt=\"Contemplative Reptile\"\n            height=\"140\"\n            image={window.location.origin + imageUrl}\n            title=\"Contemplative Reptile\"\n          />\n          <CardContent>\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n              {tag.name}\n            </Typography>\n            <Typography\n              variant=\"body2\"\n              color=\"textSecondary\"\n              component=\"p\"\n            ></Typography>\n            <List component=\"nav\" aria-label=\"main mailbox folders\">\n              <ListItem>\n                <ListItemIcon>\n                  <WbSunny />\n                </ListItemIcon>\n                <ListItemText primary={tag.temperature + ' °C'} />\n              </ListItem>\n              <ListItem>\n                <ListItemIcon>\n                  <Opacity />\n                </ListItemIcon>\n                <ListItemText\n                  primary={Number(tag.humidity).toFixed(2) + ' %'}\n                />\n              </ListItem>\n              <ListItem>\n                <ListItemIcon>\n                  <FilterDrama />\n                </ListItemIcon>\n                <ListItemText\n                  primary={Number(tag.pressure / 100000).toFixed(4) + ' hPa'}\n                />\n              </ListItem>\n              <ListItem>\n                <ListItemIcon>\n                  <Schedule />\n                </ListItemIcon>\n                <ListItemText primary={timestamp(tag.timestamp)} />\n              </ListItem>\n            </List>\n          </CardContent>\n        </CardActionArea>\n        <CardActions>\n          <Button size=\"small\">\n            <WhatsApp />{' '}\n            <a\n              href=\"whatsapp://send?text=The text to share!\"\n              data-action=\"share/whatsapp/share\"\n            >\n              Share\n            </a>\n          </Button>\n        </CardActions>\n      </Card>\n    )\n  }\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Container component=\"main\" maxWidth=\"lg\" className={classes.root}>\n        <Typography variant=\"h2\" component=\"h2\" className={classes.title}>\n          ÄLYKOTI\n        </Typography>\n        {ruuviTags.length === 0 && (\n          <Typography component=\"p\">No data available from server!</Typography>\n        )}\n        <Grid container spacing={3}>\n          <Grid item xs={12} sm={6} md={4} lg={4} xl={4}>\n            {(ruuviTags.length > 0 && ruuviTags[0] !== null) && getTagInfo(ruuviTags[0], '/balcony.jpeg')}\n          </Grid>\n          <Grid item xs={12} sm={6} md={4} lg={4} xl={4}>\n            {(ruuviTags.length > 1 && ruuviTags[1] !== null) &&\n              getTagInfo(ruuviTags[1], '/livingroom.jpg')}\n          </Grid>\n          <Grid item xs={12} sm={6} md={4} lg={4} xl={4}>\n            {(ruuviTags.length > 2 && ruuviTags[2] !== null) && getTagInfo(ruuviTags[2], '/sauna.jpg')}\n          </Grid>\n        </Grid>\n      </Container>\n    </React.Fragment>\n  )\n}\n\nexport default App\n","import { format } from 'date-fns'\n\n\nexport const timestamp = (timestamp: number) =>\n  format(new Date(timestamp), 'dd.MM.yyyy H:mm:ss')\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}